[1] Generating expression of size 10
[1] TFold size=10, child size: 6
[2] Generating expression of size 6
[2] Op1 size=6, size: 5
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 55; O2: 100; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 155; O2: 1150; Fold: 0; TFold: 0; If: 0
[2] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 55; O2: 100; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 5; O2: 50; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 5; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 55; O2: 100; Fold: 0; TFold: 0; If: 0
[2] For size 6. O1: 1305; O2: 4200; Fold: 0; TFold: 0; If: 0
[1] Op1 size=10, size: 9
[2] Generating expression of size 9
[2] Op1 size=9, size: 8
[3] Generating expression of size 8
[3] Op1 size=8, size: 7
[4] Generating expression of size 7
[4] Op1 size=7, size: 6
[5] Generating expression of size 6
[5] Op1 size=6, size: 5
[6] Generating expression of size 5
[6] Op1 size=5, size: 4
[7] Generating expression of size 4
[7] Op1 size=4, size: 3
[8] Generating expression of size 3
[8] Op1 size=3, size: 2
[9] Generating expression of size 2
[9] Op1 size=2, size: 1
[9] Op2 size=2, sizes: []
[9] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[8] Op2 size=3, sizes: [[1,1]]
[8] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[7] Op2 size=4, sizes: [[1,2],[2,1]]
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[6] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[5] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[4] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[3] Op2 size=8, sizes: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1]]
[4] Generating expression of size 6
[4] Op1 size=6, size: 5
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 6
[4] Op1 size=6, size: 5
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] For size 8. O1: 6753; O2: 23868; Fold: 0; TFold: 0; If: 0
[2] Op2 size=9, sizes: [[1,7],[2,6],[3,5],[4,4],[5,3],[6,2],[7,1]]
[3] Generating expression of size 7
[3] Op1 size=7, size: 6
[4] Generating expression of size 6
[4] Op1 size=6, size: 5
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 7
[3] Op1 size=7, size: 6
[4] Generating expression of size 6
[4] Op1 size=6, size: 5
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[2] For size 9. O1: 30621; O2: 130158; Fold: 0; TFold: 0; If: 0
[1] Op2 size=10, sizes: [[1,8],[2,7],[3,6],[4,5],[5,4],[6,3],[7,2],[8,1]]
[2] Generating expression of size 8
[2] Op1 size=8, size: 7
[3] Generating expression of size 7
[3] Op1 size=7, size: 6
[4] Generating expression of size 6
[4] Op1 size=6, size: 5
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[2] Op2 size=8, sizes: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1]]
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[2] For size 8. O1: 6753; O2: 23868; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 2
[2] Op1 size=2, size: 1
[2] Op2 size=2, sizes: []
[2] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 7
[2] Op1 size=7, size: 6
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[2] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[2] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 3
[2] Op1 size=3, size: 2
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[2] Op2 size=3, sizes: [[1,1]]
[2] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 6
[2] Op1 size=6, size: 5
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[2] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[2] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 4
[2] Op1 size=4, size: 3
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[2] Op2 size=4, sizes: [[1,2],[2,1]]
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[2] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 5
[2] Op1 size=5, size: 4
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[2] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[2] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 5
[2] Op1 size=5, size: 4
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[2] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[2] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 4
[2] Op1 size=4, size: 3
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[2] Op2 size=4, sizes: [[1,2],[2,1]]
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[2] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 6
[2] Op1 size=6, size: 5
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[2] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[2] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 3
[2] Op1 size=3, size: 2
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[2] Op2 size=3, sizes: [[1,1]]
[2] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 7
[2] Op1 size=7, size: 6
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[2] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[2] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 2
[2] Op1 size=2, size: 1
[2] Op2 size=2, sizes: []
[2] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[2] Generating expression of size 8
[2] Op1 size=8, size: 7
[3] Generating expression of size 7
[3] Op1 size=7, size: 6
[4] Generating expression of size 6
[4] Op1 size=6, size: 5
[5] Generating expression of size 5
[5] Op1 size=5, size: 4
[6] Generating expression of size 4
[6] Op1 size=4, size: 3
[7] Generating expression of size 3
[7] Op1 size=3, size: 2
[8] Generating expression of size 2
[8] Op1 size=2, size: 1
[8] Op2 size=2, sizes: []
[8] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Op2 size=3, sizes: [[1,1]]
[7] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Op2 size=4, sizes: [[1,2],[2,1]]
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Op2 size=7, sizes: [[1,5],[2,4],[3,3],[4,2],[5,1]]
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] For size 7. O1: 1263; O2: 5490; Fold: 0; TFold: 0; If: 0
[2] Op2 size=8, sizes: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1]]
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 4
[3] Op1 size=4, size: 3
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Op2 size=4, sizes: [[1,2],[2,1]]
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 3
[3] Op1 size=3, size: 2
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Op2 size=3, sizes: [[1,1]]
[3] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 5
[3] Op1 size=5, size: 4
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[3] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 2
[3] Op1 size=2, size: 1
[3] Op2 size=2, sizes: []
[3] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[3] Generating expression of size 6
[3] Op1 size=6, size: 5
[4] Generating expression of size 5
[4] Op1 size=5, size: 4
[5] Generating expression of size 4
[5] Op1 size=4, size: 3
[6] Generating expression of size 3
[6] Op1 size=3, size: 2
[7] Generating expression of size 2
[7] Op1 size=2, size: 1
[7] Op2 size=2, sizes: []
[7] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Op2 size=3, sizes: [[1,1]]
[6] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Op2 size=4, sizes: [[1,2],[2,1]]
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Op2 size=5, sizes: [[1,3],[2,2],[3,1]]
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] For size 5. O1: 57; O2: 270; Fold: 0; TFold: 0; If: 0
[3] Op2 size=6, sizes: [[1,4],[2,3],[3,2],[4,1]]
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 3
[4] Op1 size=3, size: 2
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Op2 size=3, sizes: [[1,1]]
[4] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 2
[4] Op1 size=2, size: 1
[4] Op2 size=2, sizes: []
[4] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] Generating expression of size 4
[4] Op1 size=4, size: 3
[5] Generating expression of size 3
[5] Op1 size=3, size: 2
[6] Generating expression of size 2
[6] Op1 size=2, size: 1
[6] Op2 size=2, sizes: []
[6] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Op2 size=3, sizes: [[1,1]]
[5] For size 3. O1: 3; O2: 18; Fold: 0; TFold: 0; If: 0
[4] Op2 size=4, sizes: [[1,2],[2,1]]
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[5] Generating expression of size 2
[5] Op1 size=2, size: 1
[5] Op2 size=2, sizes: []
[5] For size 2. O1: 3; O2: 0; Fold: 0; TFold: 0; If: 0
[4] For size 4. O1: 21; O2: 36; Fold: 0; TFold: 0; If: 0
[3] For size 6. O1: 327; O2: 936; Fold: 0; TFold: 0; If: 0
[2] For size 8. O1: 6753; O2: 23868; Fold: 0; TFold: 0; If: 0
[1] For size 10. O1: 160779; O2: 629136; Fold: 0; TFold: 5505; If: 0
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x1 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x2 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or x3 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 0 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or 1 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x1 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x2 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus x3 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 0 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus 1 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x1 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x2 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus x3 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 0 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (or (plus 1 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x1 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x2 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or x3 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 0 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (shr4 (plus (or 1 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (shr4 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x1 (plus (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (shr4 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x2 (plus (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (shr4 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or x3 (plus (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (shr4 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 0 (plus (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (shr4 (plus 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or 1 (plus (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (shr4 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x1 (or (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (shr4 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x2 (or (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (shr4 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus x3 (or (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (shr4 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 0 (or (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x2 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x2 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x2 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x2 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x2 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x3 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x3 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x3 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x3 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or x3 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 0 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 0 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 0 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 0 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 0 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 1 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 1 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 1 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 1 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (shr4 (or 1 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x2 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x2 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x2 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x2 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x2 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x3 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x3 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x3 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x3 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or x3 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 0 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 0 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 0 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 0 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 0 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 1 (shr4 x1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 1 (shr4 x2)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 1 (shr4 x3)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 1 (shr4 0)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or 1 (shr4 1)))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x2) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x2) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x2) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x2) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x2) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x3) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x3) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x3) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x3) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 x3) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 0) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 0) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 0) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 0) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 0) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 1) x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 1) x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 1) x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 1) 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus 1 (or (shr4 1) 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x1) (plus 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x2) (plus 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 x3) (plus 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 0) (plus 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 1) (plus 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x1) (or 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x2) (or 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 x3) (or 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 0) (or 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x2 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x2 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x2 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x2 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x2 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x3 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x3 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x3 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x3 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or x3 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 0 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 0 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 0 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 0 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 0 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 1 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 1 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 1 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 1 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 1) (or 1 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x2) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x2) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x2) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x2) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x2) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x3) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x3) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x3) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x3) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 x3) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 0) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 0) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 0) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 0) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 0) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 1) (shr4 x1))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 1) (shr4 x2))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 1) (shr4 x3))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 1) (shr4 0))) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 1) (shr4 1))) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x1 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x2 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus x3 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 0 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (shr4 (plus 1 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x1 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x2 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus x3 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 0 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus 1 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x1) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x2) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 x3) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 0) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (or (plus (shr4 1) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x1 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x2 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or x3 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 0 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (shr4 (or 1 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x1 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x2 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or x3 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 0 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x2)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x2)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x2)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x2)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x2)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x3)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x3)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x3)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x3)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 x3)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 0)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 0)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 0)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 0)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 0)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 1)) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 1)) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 1)) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 1)) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or 1 (shr4 1)) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x1) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x2) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 x3) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 0) 1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x1) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x2) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x2) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x2) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x2) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x2) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x3) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x3) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x3) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x3) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) x3) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 0) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 0) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 0) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 0) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 0) 1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 1) x1)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 1) x2)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 1) x3)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 1) 0)) , size : 10
(fold x1 0 (lambda (x2 x3) (plus (or (shr4 1) 1) 1)) , size : 10
Total: 2500
